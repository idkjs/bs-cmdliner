// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var $$Set = require("bs-platform/lib/js/set.js");
var List = require("bs-platform/lib/js/list.js");
var Curry = require("bs-platform/lib/js/curry.js");
var Caml_obj = require("bs-platform/lib/js/caml_obj.js");
var Caml_option = require("bs-platform/lib/js/caml_option.js");
var Caml_primitive = require("bs-platform/lib/js/caml_primitive.js");
var Cmdliner_manpage = require("./cmdliner_manpage.bs.js");

var c = {
  contents: 0
};

function new_id(param) {
  var id = c.contents;
  c.contents = c.contents + 1 | 0;
  if (id > c.contents) {
    throw {
          RE_EXN_ID: "Assert_failure",
          _1: [
            "cmdliner_info.ml",
            12,
            28
          ],
          Error: new Error()
        };
  }
  return id;
}

function env(env_docsOpt, env_docOpt, env_var) {
  var env_docs = env_docsOpt !== undefined ? env_docsOpt : Cmdliner_manpage.s_environment;
  var env_doc = env_docOpt !== undefined ? env_docOpt : "See option $(opt).";
  return {
          env_id: new_id(undefined),
          env_var: env_var,
          env_doc: env_doc,
          env_docs: env_docs
        };
}

function env_var(e) {
  return e.env_var;
}

function env_doc(e) {
  return e.env_doc;
}

function env_docs(e) {
  return e.env_docs;
}

function compare(a0, a1) {
  return Caml_primitive.caml_int_compare(a0.env_id, a1.env_id);
}

var Env = {
  compare: compare
};

var Envs = $$Set.Make(Env);

function pos(pos_rev, pos_start, pos_len) {
  return {
          pos_rev: pos_rev,
          pos_start: pos_start,
          pos_len: pos_len
        };
}

function pos_rev(p) {
  return p.pos_rev;
}

function pos_start(p) {
  return p.pos_start;
}

function pos_len(p) {
  return p.pos_len;
}

var dumb_pos = {
  pos_rev: false,
  pos_start: -1,
  pos_len: undefined
};

function arg(docs, docvOpt, docOpt, env, names) {
  var docv = docvOpt !== undefined ? docvOpt : "";
  var doc = docOpt !== undefined ? docOpt : "";
  var dash = function (n) {
    if (n.length === 1) {
      return "-" + n;
    } else {
      return "--" + n;
    }
  };
  var opt_names = List.map(dash, names);
  var docs$1 = docs !== undefined ? docs : (
      names ? Cmdliner_manpage.s_options : Cmdliner_manpage.s_arguments
    );
  return {
          id: new_id(undefined),
          absent: /* Val */{
            _0: {
              LAZY_DONE: true,
              VAL: ""
            }
          },
          env: env,
          doc: doc,
          docv: docv,
          docs: docs$1,
          pos: dumb_pos,
          opt_kind: /* Flag */0,
          opt_names: opt_names,
          opt_all: false
        };
}

function arg_id(a) {
  return a.id;
}

function arg_absent(a) {
  return a.absent;
}

function arg_env(a) {
  return a.env;
}

function arg_doc(a) {
  return a.doc;
}

function arg_docv(a) {
  return a.docv;
}

function arg_docs(a) {
  return a.docs;
}

function arg_pos(a) {
  return a.pos;
}

function arg_opt_kind(a) {
  return a.opt_kind;
}

function arg_opt_names(a) {
  return a.opt_names;
}

function arg_opt_name_sample(a) {
  var _param = a.opt_names;
  while(true) {
    var param = _param;
    if (!param) {
      return List.hd(a.opt_names);
    }
    var n = param.hd;
    if (n.length > 2) {
      return n;
    }
    _param = param.tl;
    continue ;
  };
}

function arg_make_req(a) {
  return {
          id: a.id,
          absent: /* Err */0,
          env: a.env,
          doc: a.doc,
          docv: a.docv,
          docs: a.docs,
          pos: a.pos,
          opt_kind: a.opt_kind,
          opt_names: a.opt_names,
          opt_all: a.opt_all
        };
}

function arg_make_all_opts(a) {
  return {
          id: a.id,
          absent: a.absent,
          env: a.env,
          doc: a.doc,
          docv: a.docv,
          docs: a.docs,
          pos: a.pos,
          opt_kind: a.opt_kind,
          opt_names: a.opt_names,
          opt_all: true
        };
}

function arg_make_opt(absent, opt_kind, a) {
  return {
          id: a.id,
          absent: absent,
          env: a.env,
          doc: a.doc,
          docv: a.docv,
          docs: a.docs,
          pos: a.pos,
          opt_kind: opt_kind,
          opt_names: a.opt_names,
          opt_all: a.opt_all
        };
}

function arg_make_opt_all(absent, opt_kind, a) {
  return {
          id: a.id,
          absent: absent,
          env: a.env,
          doc: a.doc,
          docv: a.docv,
          docs: a.docs,
          pos: a.pos,
          opt_kind: opt_kind,
          opt_names: a.opt_names,
          opt_all: true
        };
}

function arg_make_pos(pos, a) {
  return {
          id: a.id,
          absent: a.absent,
          env: a.env,
          doc: a.doc,
          docv: a.docv,
          docs: a.docs,
          pos: pos,
          opt_kind: a.opt_kind,
          opt_names: a.opt_names,
          opt_all: a.opt_all
        };
}

function arg_make_pos_abs(absent, pos, a) {
  return {
          id: a.id,
          absent: absent,
          env: a.env,
          doc: a.doc,
          docv: a.docv,
          docs: a.docs,
          pos: pos,
          opt_kind: a.opt_kind,
          opt_names: a.opt_names,
          opt_all: a.opt_all
        };
}

function arg_is_opt(a) {
  return a.opt_names !== /* [] */0;
}

function arg_is_pos(a) {
  return a.opt_names === /* [] */0;
}

function arg_is_req(a) {
  return a.absent === /* Err */0;
}

function arg_pos_cli_order(a0, a1) {
  var c = Caml_primitive.caml_bool_compare(a0.pos.pos_rev, a1.pos.pos_rev);
  if (c !== 0) {
    return c;
  } else if (a0.pos.pos_rev) {
    return Caml_primitive.caml_int_compare(a1.pos.pos_start, a0.pos.pos_start);
  } else {
    return Caml_primitive.caml_int_compare(a0.pos.pos_start, a1.pos.pos_start);
  }
}

function rev_arg_pos_cli_order(a0, a1) {
  return arg_pos_cli_order(a1, a0);
}

function compare$1(a0, a1) {
  return Caml_primitive.caml_int_compare(a0.id, a1.id);
}

var Arg = {
  compare: compare$1
};

var Args = $$Set.Make(Arg);

function exit(exit_docsOpt, exit_docOpt, max, min) {
  var exit_docs = exit_docsOpt !== undefined ? exit_docsOpt : Cmdliner_manpage.s_exit_status;
  var exit_doc = exit_docOpt !== undefined ? exit_docOpt : "undocumented";
  var max$1 = max !== undefined ? max : min;
  return {
          exit_statuses: [
            min,
            max$1
          ],
          exit_doc: exit_doc,
          exit_docs: exit_docs
        };
}

function exit_statuses(e) {
  return e.exit_statuses;
}

function exit_doc(e) {
  return e.exit_doc;
}

function exit_docs(e) {
  return e.exit_docs;
}

function exit_order(e0, e1) {
  return Caml_obj.caml_compare(e0.exit_statuses, e1.exit_statuses);
}

function term(term_argsOpt, term_man_xrefsOpt, term_manOpt, term_envsOpt, term_exitsOpt, term_sdocsOpt, term_docsOpt, term_docOpt, term_version, term_name) {
  var term_args = term_argsOpt !== undefined ? Caml_option.valFromOption(term_argsOpt) : Args.empty;
  var term_man_xrefs = term_man_xrefsOpt !== undefined ? term_man_xrefsOpt : /* [] */0;
  var term_man = term_manOpt !== undefined ? term_manOpt : /* [] */0;
  var term_envs = term_envsOpt !== undefined ? term_envsOpt : /* [] */0;
  var term_exits = term_exitsOpt !== undefined ? term_exitsOpt : /* [] */0;
  var term_sdocs = term_sdocsOpt !== undefined ? term_sdocsOpt : Cmdliner_manpage.s_options;
  var term_docs = term_docsOpt !== undefined ? term_docsOpt : "COMMANDS";
  var term_doc = term_docOpt !== undefined ? term_docOpt : "";
  var term_info = {
    term_name: term_name,
    term_version: term_version,
    term_doc: term_doc,
    term_docs: term_docs,
    term_sdocs: term_sdocs,
    term_exits: term_exits,
    term_envs: term_envs,
    term_man: term_man,
    term_man_xrefs: term_man_xrefs
  };
  return {
          term_info: term_info,
          term_args: term_args
        };
}

function term_name(t) {
  return t.term_info.term_name;
}

function term_version(t) {
  return t.term_info.term_version;
}

function term_doc(t) {
  return t.term_info.term_doc;
}

function term_docs(t) {
  return t.term_info.term_docs;
}

function term_stdopts_docs(t) {
  return t.term_info.term_sdocs;
}

function term_exits(t) {
  return t.term_info.term_exits;
}

function term_envs(t) {
  return t.term_info.term_envs;
}

function term_man(t) {
  return t.term_info.term_man;
}

function term_man_xrefs(t) {
  return t.term_info.term_man_xrefs;
}

function term_args(t) {
  return t.term_args;
}

function term_add_args(t, args) {
  return {
          term_info: t.term_info,
          term_args: Curry._2(Args.union, args, t.term_args)
        };
}

function $$eval(term, main, choices, env) {
  return {
          term: term,
          main: main,
          choices: choices,
          env: env
        };
}

function eval_term(e) {
  return e.term;
}

function eval_main(e) {
  return e.main;
}

function eval_choices(e) {
  return e.choices;
}

function eval_env_var(e, v) {
  return Curry._1(e.env, v);
}

function eval_kind(ei) {
  if (ei.choices === /* [] */0) {
    return "Simple";
  } else if (ei.term.term_info.term_name === ei.main.term_info.term_name) {
    return "Multiple_main";
  } else {
    return "Multiple_sub";
  }
}

function eval_with_term(ei, term) {
  return {
          term: term,
          main: ei.main,
          choices: ei.choices,
          env: ei.env
        };
}

function eval_has_choice(e, cmd) {
  var is_cmd = function (t) {
    return t.term_info.term_name === cmd;
  };
  return List.exists(is_cmd, e.choices);
}

exports.env = env;
exports.env_var = env_var;
exports.env_doc = env_doc;
exports.env_docs = env_docs;
exports.Env = Env;
exports.Envs = Envs;
exports.pos = pos;
exports.pos_rev = pos_rev;
exports.pos_start = pos_start;
exports.pos_len = pos_len;
exports.arg = arg;
exports.arg_id = arg_id;
exports.arg_absent = arg_absent;
exports.arg_env = arg_env;
exports.arg_doc = arg_doc;
exports.arg_docv = arg_docv;
exports.arg_docs = arg_docs;
exports.arg_opt_names = arg_opt_names;
exports.arg_opt_name_sample = arg_opt_name_sample;
exports.arg_opt_kind = arg_opt_kind;
exports.arg_pos = arg_pos;
exports.arg_make_req = arg_make_req;
exports.arg_make_all_opts = arg_make_all_opts;
exports.arg_make_opt = arg_make_opt;
exports.arg_make_opt_all = arg_make_opt_all;
exports.arg_make_pos = arg_make_pos;
exports.arg_make_pos_abs = arg_make_pos_abs;
exports.arg_is_opt = arg_is_opt;
exports.arg_is_pos = arg_is_pos;
exports.arg_is_req = arg_is_req;
exports.arg_pos_cli_order = arg_pos_cli_order;
exports.rev_arg_pos_cli_order = rev_arg_pos_cli_order;
exports.Arg = Arg;
exports.Args = Args;
exports.exit = exit;
exports.exit_statuses = exit_statuses;
exports.exit_doc = exit_doc;
exports.exit_docs = exit_docs;
exports.exit_order = exit_order;
exports.term = term;
exports.term_name = term_name;
exports.term_version = term_version;
exports.term_doc = term_doc;
exports.term_docs = term_docs;
exports.term_stdopts_docs = term_stdopts_docs;
exports.term_exits = term_exits;
exports.term_envs = term_envs;
exports.term_man = term_man;
exports.term_man_xrefs = term_man_xrefs;
exports.term_args = term_args;
exports.term_add_args = term_add_args;
exports.$$eval = $$eval;
exports.eval_term = eval_term;
exports.eval_main = eval_main;
exports.eval_choices = eval_choices;
exports.eval_env_var = eval_env_var;
exports.eval_kind = eval_kind;
exports.eval_with_term = eval_with_term;
exports.eval_has_choice = eval_has_choice;
/* Envs Not a pure module */
