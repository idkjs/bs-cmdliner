// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var List = require("bs-platform/lib/js/list.js");
var Curry = require("bs-platform/lib/js/curry.js");
var $$Buffer = require("bs-platform/lib/js/buffer.js");
var Format = require("bs-platform/lib/js/format.js");
var Printf = require("bs-platform/lib/js/printf.js");
var $$String = require("bs-platform/lib/js/string.js");
var Caml_obj = require("bs-platform/lib/js/caml_obj.js");
var Caml_option = require("bs-platform/lib/js/caml_option.js");
var Caml_string = require("bs-platform/lib/js/caml_string.js");
var Cmdliner_info = require("./cmdliner_info.bs.js");
var Caml_primitive = require("bs-platform/lib/js/caml_primitive.js");
var CamlinternalLazy = require("bs-platform/lib/js/camlinternalLazy.js");
var Cmdliner_manpage = require("./cmdliner_manpage.bs.js");

function rev_compare(n0, n1) {
  return Caml_obj.caml_compare(n1, n0);
}

function sorted_items_to_blocks(b, items) {
  var boilerplate = b !== undefined ? b : (function (param) {
        
      });
  var mk_block = function (sec, acc) {
    var b = Curry._1(boilerplate, sec);
    if (b !== undefined) {
      return [
              sec,
              {
                NAME: "Blocks",
                VAL: {
                  hd: Caml_option.valFromOption(b),
                  tl: acc
                }
              }
            ];
    } else {
      return [
              sec,
              {
                NAME: "Blocks",
                VAL: acc
              }
            ];
    }
  };
  if (!items) {
    return /* [] */0;
  }
  var match = items.hd;
  var _secs = /* [] */0;
  var _sec = match[0];
  var _acc = {
    hd: match[1],
    tl: /* [] */0
  };
  var _param = items.tl;
  while(true) {
    var param = _param;
    var acc = _acc;
    var sec = _sec;
    var secs = _secs;
    if (!param) {
      return {
              hd: mk_block(sec, acc),
              tl: secs
            };
    }
    var its = param.tl;
    var match$1 = param.hd;
    var it = match$1[1];
    var sec$prime = match$1[0];
    if (Caml_obj.caml_equal(sec$prime, sec)) {
      _param = its;
      _acc = {
        hd: it,
        tl: acc
      };
      continue ;
    }
    _param = its;
    _acc = {
      hd: it,
      tl: /* [] */0
    };
    _sec = sec$prime;
    _secs = {
      hd: mk_block(sec, acc),
      tl: secs
    };
    continue ;
  };
}

function env_info_subst(subst, e, id) {
  if (id === "env") {
    return Curry._1(Printf.sprintf(/* Format */{
                    _0: {
                      TAG: /* String_literal */11,
                      _0: "$(b,",
                      _1: {
                        TAG: /* String */2,
                        _0: /* No_padding */0,
                        _1: {
                          TAG: /* Char_literal */12,
                          _0: /* ")" */41,
                          _1: /* End_of_format */0
                        }
                      }
                    },
                    _1: "$(b,%s)"
                  }), Cmdliner_manpage.$$escape(Cmdliner_info.env_var(e)));
  } else {
    return Curry._1(subst, id);
  }
}

function arg_info_subst(subst, a, id) {
  switch (id) {
    case "docv" :
        return Curry._1(Printf.sprintf(/* Format */{
                        _0: {
                          TAG: /* String_literal */11,
                          _0: "$(i,",
                          _1: {
                            TAG: /* String */2,
                            _0: /* No_padding */0,
                            _1: {
                              TAG: /* Char_literal */12,
                              _0: /* ")" */41,
                              _1: /* End_of_format */0
                            }
                          }
                        },
                        _1: "$(i,%s)"
                      }), Cmdliner_manpage.$$escape(Cmdliner_info.arg_docv(a)));
    case "env" :
        var e = Cmdliner_info.arg_env(a);
        if (e !== undefined) {
          return env_info_subst(subst, Caml_option.valFromOption(e), id);
        } else {
          return Curry._1(subst, id);
        }
    case "opt" :
        if (Cmdliner_info.arg_is_opt(a)) {
          return Curry._1(Printf.sprintf(/* Format */{
                          _0: {
                            TAG: /* String_literal */11,
                            _0: "$(b,",
                            _1: {
                              TAG: /* String */2,
                              _0: /* No_padding */0,
                              _1: {
                                TAG: /* Char_literal */12,
                                _0: /* ")" */41,
                                _1: /* End_of_format */0
                              }
                            }
                          },
                          _1: "$(b,%s)"
                        }), Cmdliner_manpage.$$escape(Cmdliner_info.arg_opt_name_sample(a)));
        } else {
          return Curry._1(subst, id);
        }
    default:
      return Curry._1(subst, id);
  }
}

function term_info_subst(ei, param) {
  switch (param) {
    case "mname" :
        var t = Cmdliner_info.eval_main(ei);
        return Curry._1(Printf.sprintf(/* Format */{
                        _0: {
                          TAG: /* String_literal */11,
                          _0: "$(b,",
                          _1: {
                            TAG: /* String */2,
                            _0: /* No_padding */0,
                            _1: {
                              TAG: /* Char_literal */12,
                              _0: /* ")" */41,
                              _1: /* End_of_format */0
                            }
                          }
                        },
                        _1: "$(b,%s)"
                      }), Cmdliner_manpage.$$escape(Cmdliner_info.term_name(t)));
    case "tname" :
        var t$1 = Cmdliner_info.eval_term(ei);
        return Curry._1(Printf.sprintf(/* Format */{
                        _0: {
                          TAG: /* String_literal */11,
                          _0: "$(b,",
                          _1: {
                            TAG: /* String */2,
                            _0: /* No_padding */0,
                            _1: {
                              TAG: /* Char_literal */12,
                              _0: /* ")" */41,
                              _1: /* End_of_format */0
                            }
                          }
                        },
                        _1: "$(b,%s)"
                      }), Cmdliner_manpage.$$escape(Cmdliner_info.term_name(t$1)));
    default:
      return ;
  }
}

function invocation(sepOpt, ei) {
  var sep = sepOpt !== undefined ? sepOpt : /* " " */32;
  var match = Cmdliner_info.eval_kind(ei);
  if (match === "Multiple_sub") {
    return Curry._3(Printf.sprintf(/* Format */{
                    _0: {
                      TAG: /* String */2,
                      _0: /* No_padding */0,
                      _1: {
                        TAG: /* Char */0,
                        _0: {
                          TAG: /* String */2,
                          _0: /* No_padding */0,
                          _1: /* End_of_format */0
                        }
                      }
                    },
                    _1: "%s%c%s"
                  }), Cmdliner_info.term_name(Cmdliner_info.eval_main(ei)), sep, Cmdliner_info.term_name(Cmdliner_info.eval_term(ei)));
  }
  var t = Cmdliner_info.eval_main(ei);
  return Cmdliner_manpage.$$escape(Cmdliner_info.term_name(t));
}

function plain_invocation(ei) {
  return invocation(undefined, ei);
}

function synopsis_pos_arg(a) {
  var v = Cmdliner_info.arg_docv(a);
  var v$1 = v === "" ? "ARG" : v;
  var v$2 = Curry._1(Printf.sprintf(/* Format */{
            _0: {
              TAG: /* String_literal */11,
              _0: "$(i,",
              _1: {
                TAG: /* String */2,
                _0: /* No_padding */0,
                _1: {
                  TAG: /* Char_literal */12,
                  _0: /* ")" */41,
                  _1: /* End_of_format */0
                }
              }
            },
            _1: "$(i,%s)"
          }), Cmdliner_manpage.$$escape(v$1));
  var v$3 = Curry._1(Cmdliner_info.arg_is_req(a) ? Printf.sprintf(/* Format */{
              _0: {
                TAG: /* String */2,
                _0: /* No_padding */0,
                _1: /* End_of_format */0
              },
              _1: "%s"
            }) : Printf.sprintf(/* Format */{
              _0: {
                TAG: /* Char_literal */12,
                _0: /* "[" */91,
                _1: {
                  TAG: /* String */2,
                  _0: /* No_padding */0,
                  _1: {
                    TAG: /* Char_literal */12,
                    _0: /* "]" */93,
                    _1: /* End_of_format */0
                  }
                }
              },
              _1: "[%s]"
            }), v$2);
  var n = Cmdliner_info.pos_len(Cmdliner_info.arg_pos(a));
  if (n === undefined) {
    return v$3 + "...";
  }
  if (n === 1) {
    return v$3;
  }
  var loop = function (_n, _acc) {
    while(true) {
      var acc = _acc;
      var n = _n;
      if (n <= 0) {
        return acc;
      }
      _acc = {
        hd: v$3,
        tl: acc
      };
      _n = n - 1 | 0;
      continue ;
    };
  };
  return $$String.concat(" ", loop(n, /* [] */0));
}

function synopsis(ei) {
  var match = Cmdliner_info.eval_kind(ei);
  if (match === "Multiple_main") {
    return Curry._1(Printf.sprintf(/* Format */{
                    _0: {
                      TAG: /* String_literal */11,
                      _0: "$(b,",
                      _1: {
                        TAG: /* String */2,
                        _0: /* No_padding */0,
                        _1: {
                          TAG: /* String_literal */11,
                          _0: ") $(i,COMMAND) ...",
                          _1: /* End_of_format */0
                        }
                      }
                    },
                    _1: "$(b,%s) $(i,COMMAND) ..."
                  }), Cmdliner_manpage.$$escape(invocation(undefined, ei)));
  }
  var rev_cli_order = function (param, param$1) {
    return Cmdliner_info.rev_arg_pos_cli_order(param[0], param$1[0]);
  };
  var add_pos = function (a, acc) {
    if (Cmdliner_info.arg_is_opt(a)) {
      return acc;
    } else {
      return {
              hd: [
                a,
                synopsis_pos_arg(a)
              ],
              tl: acc
            };
    }
  };
  var args = Cmdliner_info.term_args(Cmdliner_info.eval_term(ei));
  var pargs = Curry._3(Cmdliner_info.Args.fold, add_pos, args, /* [] */0);
  var pargs$1 = List.sort(rev_cli_order, pargs);
  var pargs$2 = $$String.concat(" ", List.rev_map((function (prim) {
              return prim[1];
            }), pargs$1));
  return Curry._2(Printf.sprintf(/* Format */{
                  _0: {
                    TAG: /* String_literal */11,
                    _0: "$(b,",
                    _1: {
                      TAG: /* String */2,
                      _0: /* No_padding */0,
                      _1: {
                        TAG: /* String_literal */11,
                        _0: ") [$(i,OPTION)]... ",
                        _1: {
                          TAG: /* String */2,
                          _0: /* No_padding */0,
                          _1: /* End_of_format */0
                        }
                      }
                    }
                  },
                  _1: "$(b,%s) [$(i,OPTION)]... %s"
                }), Cmdliner_manpage.$$escape(invocation(undefined, ei)), pargs$2);
}

function cmd_docs(ei) {
  var match = Cmdliner_info.eval_kind(ei);
  if (match !== "Multiple_main") {
    return /* [] */0;
  }
  var add_cmd = function (acc, t) {
    var cmd = Curry._1(Printf.sprintf(/* Format */{
              _0: {
                TAG: /* String_literal */11,
                _0: "$(b,",
                _1: {
                  TAG: /* String */2,
                  _0: /* No_padding */0,
                  _1: {
                    TAG: /* Char_literal */12,
                    _0: /* ")" */41,
                    _1: /* End_of_format */0
                  }
                }
              },
              _1: "$(b,%s)"
            }), Cmdliner_manpage.$$escape(Cmdliner_info.term_name(t)));
    return {
            hd: [
              Cmdliner_info.term_docs(t),
              {
                NAME: "I",
                VAL: [
                  cmd,
                  Cmdliner_info.term_doc(t)
                ]
              }
            ],
            tl: acc
          };
  };
  var by_sec_by_rev_name = function (param, param$1) {
    var c = Caml_obj.caml_compare(param[0], param$1[0]);
    if (c !== 0) {
      return c;
    } else {
      return Caml_obj.caml_compare(param$1[1].VAL[0], param[1].VAL[0]);
    }
  };
  var cmds = List.fold_left(add_cmd, /* [] */0, Cmdliner_info.eval_choices(ei));
  var cmds$1 = List.sort(by_sec_by_rev_name, cmds);
  return sorted_items_to_blocks(undefined, cmds$1);
}

function arg_man_item_label(a) {
  if (Cmdliner_info.arg_is_pos(a)) {
    return Curry._1(Printf.sprintf(/* Format */{
                    _0: {
                      TAG: /* String_literal */11,
                      _0: "$(i,",
                      _1: {
                        TAG: /* String */2,
                        _0: /* No_padding */0,
                        _1: {
                          TAG: /* Char_literal */12,
                          _0: /* ")" */41,
                          _1: /* End_of_format */0
                        }
                      }
                    },
                    _1: "$(i,%s)"
                  }), Cmdliner_manpage.$$escape(Cmdliner_info.arg_docv(a)));
  }
  var fmt_name = function ($$var) {
    var match = Cmdliner_info.arg_opt_kind(a);
    if (typeof match === "number") {
      if (match !== 0) {
        return function (n) {
          if (n.length > 2) {
            return Curry._2(Printf.sprintf(/* Format */{
                            _0: {
                              TAG: /* String_literal */11,
                              _0: "$(b,",
                              _1: {
                                TAG: /* String */2,
                                _0: /* No_padding */0,
                                _1: {
                                  TAG: /* String_literal */11,
                                  _0: ")=$(i,",
                                  _1: {
                                    TAG: /* String */2,
                                    _0: /* No_padding */0,
                                    _1: {
                                      TAG: /* Char_literal */12,
                                      _0: /* ")" */41,
                                      _1: /* End_of_format */0
                                    }
                                  }
                                }
                              }
                            },
                            _1: "$(b,%s)=$(i,%s)"
                          }), Cmdliner_manpage.$$escape(n), Cmdliner_manpage.$$escape($$var));
          } else {
            return Curry._2(Printf.sprintf(/* Format */{
                            _0: {
                              TAG: /* String_literal */11,
                              _0: "$(b,",
                              _1: {
                                TAG: /* String */2,
                                _0: /* No_padding */0,
                                _1: {
                                  TAG: /* String_literal */11,
                                  _0: ") $(i,",
                                  _1: {
                                    TAG: /* String */2,
                                    _0: /* No_padding */0,
                                    _1: {
                                      TAG: /* Char_literal */12,
                                      _0: /* ")" */41,
                                      _1: /* End_of_format */0
                                    }
                                  }
                                }
                              }
                            },
                            _1: "$(b,%s) $(i,%s)"
                          }), Cmdliner_manpage.$$escape(n), Cmdliner_manpage.$$escape($$var));
          }
        };
      } else {
        return function (n) {
          return Curry._1(Printf.sprintf(/* Format */{
                          _0: {
                            TAG: /* String_literal */11,
                            _0: "$(b,",
                            _1: {
                              TAG: /* String */2,
                              _0: /* No_padding */0,
                              _1: {
                                TAG: /* Char_literal */12,
                                _0: /* ")" */41,
                                _1: /* End_of_format */0
                              }
                            }
                          },
                          _1: "$(b,%s)"
                        }), Cmdliner_manpage.$$escape(n));
        };
      }
    } else {
      return function (n) {
        if (n.length > 2) {
          return Curry._2(Printf.sprintf(/* Format */{
                          _0: {
                            TAG: /* String_literal */11,
                            _0: "$(b,",
                            _1: {
                              TAG: /* String */2,
                              _0: /* No_padding */0,
                              _1: {
                                TAG: /* String_literal */11,
                                _0: ")[=$(i,",
                                _1: {
                                  TAG: /* String */2,
                                  _0: /* No_padding */0,
                                  _1: {
                                    TAG: /* String_literal */11,
                                    _0: ")]",
                                    _1: /* End_of_format */0
                                  }
                                }
                              }
                            }
                          },
                          _1: "$(b,%s)[=$(i,%s)]"
                        }), Cmdliner_manpage.$$escape(n), Cmdliner_manpage.$$escape($$var));
        } else {
          return Curry._2(Printf.sprintf(/* Format */{
                          _0: {
                            TAG: /* String_literal */11,
                            _0: "$(b,",
                            _1: {
                              TAG: /* String */2,
                              _0: /* No_padding */0,
                              _1: {
                                TAG: /* String_literal */11,
                                _0: ") [$(i,",
                                _1: {
                                  TAG: /* String */2,
                                  _0: /* No_padding */0,
                                  _1: {
                                    TAG: /* String_literal */11,
                                    _0: ")]",
                                    _1: /* End_of_format */0
                                  }
                                }
                              }
                            }
                          },
                          _1: "$(b,%s) [$(i,%s)]"
                        }), Cmdliner_manpage.$$escape(n), Cmdliner_manpage.$$escape($$var));
        }
      };
    }
  };
  var v = Cmdliner_info.arg_docv(a);
  var $$var = v === "" ? "VAL" : v;
  var names = List.sort(Caml_primitive.caml_string_compare, Cmdliner_info.arg_opt_names(a));
  return $$String.concat(", ", List.rev_map(fmt_name($$var), names));
}

function arg_docs(errs, subst, buf, ei) {
  var by_sec_by_arg = function (a0, a1) {
    var c = Caml_primitive.caml_string_compare(Cmdliner_info.arg_docs(a0), Cmdliner_info.arg_docs(a1));
    if (c !== 0) {
      return c;
    }
    var match = Cmdliner_info.arg_is_opt(a0);
    var match$1 = Cmdliner_info.arg_is_opt(a1);
    if (!match) {
      if (match$1) {
        return 1;
      } else {
        return Caml_primitive.caml_string_compare($$String.lowercase_ascii(Cmdliner_info.arg_docv(a0)), $$String.lowercase_ascii(Cmdliner_info.arg_docv(a1)));
      }
    }
    if (!match$1) {
      return -1;
    }
    var key = function (names) {
      var k = List.hd(List.sort(rev_compare, names));
      var k$1 = $$String.lowercase_ascii(k);
      if (Caml_string.get(k$1, 1) === /* "-" */45) {
        return $$String.sub(k$1, 1, k$1.length - 1 | 0);
      } else {
        return k$1;
      }
    };
    return Caml_primitive.caml_string_compare(key(Cmdliner_info.arg_opt_names(a0)), key(Cmdliner_info.arg_opt_names(a1)));
  };
  var keep_arg = function (a, acc) {
    if (Cmdliner_info.arg_is_pos(a) && (Cmdliner_info.arg_docv(a) === "" || Cmdliner_info.arg_doc(a) === "")) {
      return acc;
    } else {
      return {
              hd: a,
              tl: acc
            };
    }
  };
  var args = Cmdliner_info.term_args(Cmdliner_info.eval_term(ei));
  var args$1 = Curry._3(Cmdliner_info.Args.fold, keep_arg, args, /* [] */0);
  var args$2 = List.sort(by_sec_by_arg, args$1);
  var args$3 = List.rev_map((function (param) {
          var or_env = function (value, a) {
            var e = Cmdliner_info.arg_env(a);
            if (e === undefined) {
              return "";
            }
            var value$1 = value ? " or" : "absent ";
            return Curry._2(Printf.sprintf(/* Format */{
                            _0: {
                              TAG: /* String */2,
                              _0: /* No_padding */0,
                              _1: {
                                TAG: /* String_literal */11,
                                _0: " $(b,",
                                _1: {
                                  TAG: /* String */2,
                                  _0: /* No_padding */0,
                                  _1: {
                                    TAG: /* String_literal */11,
                                    _0: ") env",
                                    _1: /* End_of_format */0
                                  }
                                }
                              }
                            },
                            _1: "%s $(b,%s) env"
                          }), value$1, Cmdliner_manpage.$$escape(Cmdliner_info.env_var(Caml_option.valFromOption(e))));
          };
          var v = Cmdliner_info.arg_absent(param);
          var absent;
          if (v) {
            var v$1 = CamlinternalLazy.force(v._0);
            absent = v$1 === "" ? Curry._1(Printf.sprintf(/* Format */{
                        _0: {
                          TAG: /* String */2,
                          _0: /* No_padding */0,
                          _1: /* End_of_format */0
                        },
                        _1: "%s"
                      }), or_env(false, param)) : Curry._2(Printf.sprintf(/* Format */{
                        _0: {
                          TAG: /* String_literal */11,
                          _0: "absent=",
                          _1: {
                            TAG: /* String */2,
                            _0: /* No_padding */0,
                            _1: {
                              TAG: /* String */2,
                              _0: /* No_padding */0,
                              _1: /* End_of_format */0
                            }
                          }
                        },
                        _1: "absent=%s%s"
                      }), Cmdliner_manpage.$$escape(v$1), or_env(true, param));
          } else {
            absent = "required";
          }
          var v$2 = Cmdliner_info.arg_opt_kind(param);
          var optvopt = typeof v$2 === "number" ? "" : Curry._1(Printf.sprintf(/* Format */{
                      _0: {
                        TAG: /* String_literal */11,
                        _0: "default=",
                        _1: {
                          TAG: /* String */2,
                          _0: /* No_padding */0,
                          _1: /* End_of_format */0
                        }
                      },
                      _1: "default=%s"
                    }), v$2._0);
          var argvdoc;
          var exit = 0;
          var s;
          var exit$1 = 0;
          if (optvopt === "" && absent === "") {
            argvdoc = "";
          } else {
            exit$1 = 2;
          }
          if (exit$1 === 2) {
            if (absent === "") {
              s = optvopt;
              exit = 1;
            } else if (optvopt === "") {
              s = absent;
              exit = 1;
            } else {
              argvdoc = Curry._2(Printf.sprintf(/* Format */{
                        _0: {
                          TAG: /* String_literal */11,
                          _0: " (",
                          _1: {
                            TAG: /* String */2,
                            _0: /* No_padding */0,
                            _1: {
                              TAG: /* String_literal */11,
                              _0: ") (",
                              _1: {
                                TAG: /* String */2,
                                _0: /* No_padding */0,
                                _1: {
                                  TAG: /* Char_literal */12,
                                  _0: /* ")" */41,
                                  _1: /* End_of_format */0
                                }
                              }
                            }
                          }
                        },
                        _1: " (%s) (%s)"
                      }), optvopt, absent);
            }
          }
          if (exit === 1) {
            argvdoc = Curry._1(Printf.sprintf(/* Format */{
                      _0: {
                        TAG: /* String_literal */11,
                        _0: " (",
                        _1: {
                          TAG: /* String */2,
                          _0: /* No_padding */0,
                          _1: {
                            TAG: /* Char_literal */12,
                            _0: /* ")" */41,
                            _1: /* End_of_format */0
                          }
                        }
                      },
                      _1: " (%s)"
                    }), s);
          }
          var subst$1 = function (param$1) {
            return arg_info_subst(subst, param, param$1);
          };
          var doc = Cmdliner_info.arg_doc(param);
          var doc$1 = Cmdliner_manpage.subst_vars(errs, subst$1, buf, doc);
          return [
                  Cmdliner_info.arg_docs(param),
                  {
                    NAME: "I",
                    VAL: [
                      arg_man_item_label(param) + argvdoc,
                      doc$1
                    ]
                  }
                ];
        }), args$2);
  return sorted_items_to_blocks(undefined, args$3);
}

function exit_boilerplate(sec) {
  if (sec === Cmdliner_manpage.s_exit_status) {
    return Cmdliner_manpage.s_exit_status_intro;
  }
  
}

function exit_docs(errs, subst, buf, has_sexit, ei) {
  var by_sec = function (param, param$1) {
    return Caml_obj.caml_compare(param[0], param$1[0]);
  };
  var add_exit_item = function (acc, e) {
    var subst$1 = function (param) {
      switch (param) {
        case "status" :
            return Curry._1(Printf.sprintf(/* Format */{
                            _0: {
                              TAG: /* Int */4,
                              _0: /* Int_d */0,
                              _1: /* No_padding */0,
                              _2: /* No_precision */0,
                              _3: /* End_of_format */0
                            },
                            _1: "%d"
                          }), Cmdliner_info.exit_statuses(e)[0]);
        case "status_max" :
            return Curry._1(Printf.sprintf(/* Format */{
                            _0: {
                              TAG: /* Int */4,
                              _0: /* Int_d */0,
                              _1: /* No_padding */0,
                              _2: /* No_precision */0,
                              _3: /* End_of_format */0
                            },
                            _1: "%d"
                          }), Cmdliner_info.exit_statuses(e)[1]);
        default:
          return Curry._1(subst, param);
      }
    };
    var match = Cmdliner_info.exit_statuses(e);
    var max = match[1];
    var min = match[0];
    var doc = Cmdliner_info.exit_doc(e);
    var label = min === max ? Curry._1(Printf.sprintf(/* Format */{
                _0: {
                  TAG: /* Int */4,
                  _0: /* Int_d */0,
                  _1: /* No_padding */0,
                  _2: /* No_precision */0,
                  _3: /* End_of_format */0
                },
                _1: "%d"
              }), min) : Curry._2(Printf.sprintf(/* Format */{
                _0: {
                  TAG: /* Int */4,
                  _0: /* Int_d */0,
                  _1: /* No_padding */0,
                  _2: /* No_precision */0,
                  _3: {
                    TAG: /* Char_literal */12,
                    _0: /* "-" */45,
                    _1: {
                      TAG: /* Int */4,
                      _0: /* Int_d */0,
                      _1: /* No_padding */0,
                      _2: /* No_precision */0,
                      _3: /* End_of_format */0
                    }
                  }
                },
                _1: "%d-%d"
              }), min, max);
    var item_1 = [
      label,
      Cmdliner_manpage.subst_vars(errs, subst$1, buf, doc)
    ];
    var item = {
      NAME: "I",
      VAL: item_1
    };
    return {
            hd: [
              Cmdliner_info.exit_docs(e),
              item
            ],
            tl: acc
          };
  };
  var exits = Cmdliner_info.term_exits(Cmdliner_info.eval_term(ei));
  var exits$1 = List.sort(Cmdliner_info.exit_order, exits);
  var exits$2 = List.fold_left(add_exit_item, /* [] */0, exits$1);
  var exits$3 = List.stable_sort(by_sec, exits$2);
  var boilerplate = has_sexit ? undefined : exit_boilerplate;
  return sorted_items_to_blocks(boilerplate, exits$3);
}

function env_boilerplate(sec) {
  if (sec === Cmdliner_manpage.s_environment) {
    return Cmdliner_manpage.s_environment_intro;
  }
  
}

function env_docs(errs, subst, buf, has_senv, ei) {
  var add_env_item = function (subst, acc, e) {
    var seen = acc[0];
    if (Curry._2(Cmdliner_info.Envs.mem, e, seen)) {
      return acc;
    }
    var seen$1 = Curry._2(Cmdliner_info.Envs.add, e, seen);
    var $$var = Curry._1(Printf.sprintf(/* Format */{
              _0: {
                TAG: /* String_literal */11,
                _0: "$(b,",
                _1: {
                  TAG: /* String */2,
                  _0: /* No_padding */0,
                  _1: {
                    TAG: /* Char_literal */12,
                    _0: /* ")" */41,
                    _1: /* End_of_format */0
                  }
                }
              },
              _1: "$(b,%s)"
            }), Cmdliner_manpage.$$escape(Cmdliner_info.env_var(e)));
    var doc = Cmdliner_info.env_doc(e);
    var doc$1 = Cmdliner_manpage.subst_vars(errs, subst, buf, doc);
    var envs_0 = [
      Cmdliner_info.env_docs(e),
      {
        NAME: "I",
        VAL: [
          $$var,
          doc$1
        ]
      }
    ];
    var envs_1 = acc[1];
    var envs = {
      hd: envs_0,
      tl: envs_1
    };
    return [
            seen$1,
            envs
          ];
  };
  var add_arg_env = function (a, acc) {
    var e = Cmdliner_info.arg_env(a);
    if (e !== undefined) {
      return add_env_item((function (param) {
                    return arg_info_subst(subst, a, param);
                  }), acc, Caml_option.valFromOption(e));
    } else {
      return acc;
    }
  };
  var add_env = function (acc, e) {
    return add_env_item((function (param) {
                  return env_info_subst(subst, e, param);
                }), acc, e);
  };
  var by_sec_by_rev_name = function (param, param$1) {
    var c = Caml_obj.caml_compare(param[0], param$1[0]);
    if (c !== 0) {
      return c;
    } else {
      return Caml_obj.caml_compare(param$1[1].VAL[0], param[1].VAL[0]);
    }
  };
  var args = Cmdliner_info.term_args(Cmdliner_info.eval_term(ei));
  var tenvs = Cmdliner_info.term_envs(Cmdliner_info.eval_term(ei));
  var init_0 = Cmdliner_info.Envs.empty;
  var init = [
    init_0,
    /* [] */0
  ];
  var acc = Curry._3(Cmdliner_info.Args.fold, add_arg_env, args, init);
  var match = List.fold_left(add_env, acc, tenvs);
  var envs = List.sort(by_sec_by_rev_name, match[1]);
  var boilerplate = has_senv ? undefined : env_boilerplate;
  return sorted_items_to_blocks(boilerplate, envs);
}

function xref_docs(errs, ei) {
  var main = Cmdliner_info.term_name(Cmdliner_info.eval_main(ei));
  var to_xref = function (param) {
    if (typeof param === "string") {
      return [
              main,
              1
            ];
    }
    var variant = param.NAME;
    if (variant === "Page") {
      var match = param.VAL;
      return [
              match[0],
              match[1]
            ];
    }
    if (variant === "Tool") {
      return [
              param.VAL,
              1
            ];
    }
    var c = param.VAL;
    if (Cmdliner_info.eval_has_choice(ei, c)) {
      return [
              Curry._2(Printf.sprintf(/* Format */{
                        _0: {
                          TAG: /* String */2,
                          _0: /* No_padding */0,
                          _1: {
                            TAG: /* Char_literal */12,
                            _0: /* "-" */45,
                            _1: {
                              TAG: /* String */2,
                              _0: /* No_padding */0,
                              _1: /* End_of_format */0
                            }
                          }
                        },
                        _1: "%s-%s"
                      }), main, c),
              1
            ];
    } else {
      Curry._1(Format.fprintf(errs, /* Format */{
                _0: {
                  TAG: /* String_literal */11,
                  _0: "xref ",
                  _1: {
                    TAG: /* String */2,
                    _0: /* No_padding */0,
                    _1: {
                      TAG: /* String_literal */11,
                      _0: ": no such term name",
                      _1: {
                        TAG: /* Formatting_lit */17,
                        _0: /* Flush_newline */4,
                        _1: /* End_of_format */0
                      }
                    }
                  }
                },
                _1: "xref %s: no such term name@."
              }), c);
      return [
              "doc-err",
              0
            ];
    }
  };
  var xref_str = function (param) {
    return Curry._2(Printf.sprintf(/* Format */{
                    _0: {
                      TAG: /* String */2,
                      _0: /* No_padding */0,
                      _1: {
                        TAG: /* Char_literal */12,
                        _0: /* "(" */40,
                        _1: {
                          TAG: /* Int */4,
                          _0: /* Int_d */0,
                          _1: /* No_padding */0,
                          _2: /* No_precision */0,
                          _3: {
                            TAG: /* Char_literal */12,
                            _0: /* ")" */41,
                            _1: /* End_of_format */0
                          }
                        }
                      }
                    },
                    _1: "%s(%d)"
                  }), Cmdliner_manpage.$$escape(param[0]), param[1]);
  };
  var xrefs = Cmdliner_info.term_man_xrefs(Cmdliner_info.eval_term(ei));
  var xrefs$1 = List.fold_left((function (acc, x) {
          return {
                  hd: to_xref(x),
                  tl: acc
                };
        }), /* [] */0, xrefs);
  var xrefs$2 = List.rev_map(xref_str, List.sort(rev_compare, xrefs$1));
  if (xrefs$2 === /* [] */0) {
    return /* [] */0;
  } else {
    return {
            hd: [
              Cmdliner_manpage.s_see_also,
              {
                NAME: "P",
                VAL: $$String.concat(", ", xrefs$2)
              }
            ],
            tl: /* [] */0
          };
  }
}

function ensure_s_name(ei, sm) {
  if (Cmdliner_manpage.smap_has_section(sm, Cmdliner_manpage.s_name)) {
    return sm;
  }
  var tname = Cmdliner_manpage.$$escape(invocation(/* "-" */45, ei));
  var tdoc = Cmdliner_info.term_doc(Cmdliner_info.eval_term(ei));
  var tagline = tdoc === "" ? "" : Curry._1(Printf.sprintf(/* Format */{
              _0: {
                TAG: /* String_literal */11,
                _0: " - ",
                _1: {
                  TAG: /* String */2,
                  _0: /* No_padding */0,
                  _1: /* End_of_format */0
                }
              },
              _1: " - %s"
            }), tdoc);
  var tagline_1 = Curry._2(Printf.sprintf(/* Format */{
            _0: {
              TAG: /* String */2,
              _0: /* No_padding */0,
              _1: {
                TAG: /* String */2,
                _0: /* No_padding */0,
                _1: /* End_of_format */0
              }
            },
            _1: "%s%s"
          }), tname, tagline);
  var tagline$1 = {
    NAME: "P",
    VAL: tagline_1
  };
  return Cmdliner_manpage.smap_append_block(sm, Cmdliner_manpage.s_name, tagline$1);
}

function ensure_s_synopsis(ei, sm) {
  if (Cmdliner_manpage.smap_has_section(sm, Cmdliner_manpage.s_synopsis)) {
    return sm;
  }
  var synopsis_1 = synopsis(ei);
  var synopsis$1 = {
    NAME: "P",
    VAL: synopsis_1
  };
  return Cmdliner_manpage.smap_append_block(sm, Cmdliner_manpage.s_synopsis, synopsis$1);
}

function insert_term_man_docs(errs, ei, sm) {
  var buf = $$Buffer.create(200);
  var subst = function (param) {
    return term_info_subst(ei, param);
  };
  var ins = function (sm, param) {
    return Cmdliner_manpage.smap_append_block(sm, param[0], param[1]);
  };
  var has_senv = Cmdliner_manpage.smap_has_section(sm, Cmdliner_manpage.s_environment);
  var has_sexit = Cmdliner_manpage.smap_has_section(sm, Cmdliner_manpage.s_exit_status);
  var sm$1 = List.fold_left(ins, sm, cmd_docs(ei));
  var sm$2 = List.fold_left(ins, sm$1, arg_docs(errs, subst, buf, ei));
  var sm$3 = List.fold_left(ins, sm$2, exit_docs(errs, subst, buf, has_sexit, ei));
  var sm$4 = List.fold_left(ins, sm$3, env_docs(errs, subst, buf, has_senv, ei));
  return List.fold_left(ins, sm$4, xref_docs(errs, ei));
}

function text(errs, ei) {
  var man = Cmdliner_info.term_man(Cmdliner_info.eval_term(ei));
  var sm = Cmdliner_manpage.smap_of_blocks(man);
  var sm$1 = ensure_s_name(ei, sm);
  var sm$2 = ensure_s_synopsis(ei, sm$1);
  return Cmdliner_manpage.smap_to_blocks(insert_term_man_docs(errs, ei, sm$2));
}

function title(ei) {
  var main = Cmdliner_info.eval_main(ei);
  var exec = $$String.capitalize_ascii(Cmdliner_info.term_name(main));
  var name = $$String.uppercase_ascii(Cmdliner_manpage.$$escape(invocation(/* "-" */45, ei)));
  var center_header = Cmdliner_manpage.$$escape(Curry._1(Printf.sprintf(/* Format */{
                _0: {
                  TAG: /* String */2,
                  _0: /* No_padding */0,
                  _1: {
                    TAG: /* String_literal */11,
                    _0: " Manual",
                    _1: /* End_of_format */0
                  }
                },
                _1: "%s Manual"
              }), exec));
  var v = Cmdliner_info.term_version(main);
  var version = v !== undefined ? " " + v : "";
  var left_footer = Cmdliner_manpage.$$escape(Curry._2(Printf.sprintf(/* Format */{
                _0: {
                  TAG: /* String */2,
                  _0: /* No_padding */0,
                  _1: {
                    TAG: /* String */2,
                    _0: /* No_padding */0,
                    _1: /* End_of_format */0
                  }
                },
                _1: "%s%s"
              }), exec, version));
  return [
          name,
          1,
          "",
          left_footer,
          center_header
        ];
}

function man(errs, ei) {
  return [
          title(ei),
          text(errs, ei)
        ];
}

function pp_man(errs, fmt, ppf, ei) {
  return Cmdliner_manpage.print(Caml_option.some(errs), (function (param) {
                return term_info_subst(ei, param);
              }), fmt, ppf, man(errs, ei));
}

function pp_plain_synopsis(errs, ppf, ei) {
  var buf = $$Buffer.create(100);
  var subst = function (param) {
    return term_info_subst(ei, param);
  };
  return Curry._1(Format.fprintf(ppf, /* Format */{
                  _0: {
                    TAG: /* Formatting_gen */18,
                    _0: {
                      TAG: /* Open_box */1,
                      _0: /* Format */{
                        _0: /* End_of_format */0,
                        _1: ""
                      }
                    },
                    _1: {
                      TAG: /* String */2,
                      _0: /* No_padding */0,
                      _1: {
                        TAG: /* Formatting_lit */17,
                        _0: /* Close_box */0,
                        _1: /* End_of_format */0
                      }
                    }
                  },
                  _1: "@[%s@]"
                }), Cmdliner_manpage.doc_to_plain(errs, subst, buf, synopsis(ei)));
}

exports.plain_invocation = plain_invocation;
exports.pp_man = pp_man;
exports.pp_plain_synopsis = pp_plain_synopsis;
/* Format Not a pure module */
