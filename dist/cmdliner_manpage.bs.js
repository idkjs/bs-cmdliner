// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var Sys = require("bs-platform/lib/js/sys.js");
var List = require("bs-platform/lib/js/list.js");
var Bytes = require("bs-platform/lib/js/bytes.js");
var Curry = require("bs-platform/lib/js/curry.js");
var $$Buffer = require("bs-platform/lib/js/buffer.js");
var Format = require("bs-platform/lib/js/format.js");
var Printf = require("bs-platform/lib/js/printf.js");
var $$String = require("bs-platform/lib/js/string.js");
var Caml_obj = require("bs-platform/lib/js/caml_obj.js");
var Caml_sys = require("bs-platform/lib/js/caml_sys.js");
var Filename = require("bs-platform/lib/js/filename.js");
var Caml_array = require("bs-platform/lib/js/caml_array.js");
var Caml_bytes = require("bs-platform/lib/js/caml_bytes.js");
var Pervasives = require("bs-platform/lib/js/pervasives.js");
var Caml_option = require("bs-platform/lib/js/caml_option.js");
var Caml_string = require("bs-platform/lib/js/caml_string.js");
var Cmdliner_base = require("./cmdliner_base.bs.js");
var Caml_js_exceptions = require("bs-platform/lib/js/caml_js_exceptions.js");
var Caml_external_polyfill = require("bs-platform/lib/js/caml_external_polyfill.js");

var s_name = "NAME";

var s_synopsis = "SYNOPSIS";

var s_description = "DESCRIPTION";

var s_commands = "COMMANDS";

var s_arguments = "ARGUMENTS";

var s_options = "OPTIONS";

var s_common_options = "COMMON OPTIONS";

var s_exit_status = "EXIT STATUS";

var s_environment = "ENVIRONMENT";

var s_files = "FILES";

var s_examples = "EXAMPLES";

var s_bugs = "BUGS";

var s_authors = "AUTHORS";

var s_see_also = "SEE ALSO";

var order = [
  s_name,
  s_synopsis,
  s_description,
  "",
  s_commands,
  s_arguments,
  s_options,
  s_common_options,
  s_exit_status,
  s_environment,
  s_files,
  s_examples,
  s_bugs,
  s_authors,
  s_see_also
];

function section_to_order(on_unknown, s) {
  var max = order.length - 1 | 0;
  var _i = 0;
  while(true) {
    var i = _i;
    if (i > max) {
      return on_unknown;
    }
    if (Caml_array.caml_array_get(order, i) === s) {
      return i;
    }
    _i = i + 1 | 0;
    continue ;
  };
}

function smap_of_blocks(bs) {
  var loop = function (_s, _s_o, _rbs, _smap, _param) {
    while(true) {
      var param = _param;
      var smap = _smap;
      var rbs = _rbs;
      var s_o = _s_o;
      var s = _s;
      if (!param) {
        return [
                s,
                s_o,
                rbs,
                smap
              ];
      }
      var c = param.hd;
      if (typeof c !== "string") {
        var variant = c.NAME;
        if (!(variant === "Pre" || variant === "P" || variant === "I")) {
          if (variant === "S") {
            var new_sec = c.VAL;
            var new_o = section_to_order(s_o, new_sec);
            _param = param.tl;
            _smap = {
              hd: [
                s,
                [
                  s_o,
                  rbs
                ]
              ],
              tl: smap
            };
            _rbs = /* [] */0;
            _s_o = new_o;
            _s = new_sec;
            continue ;
          }
          var match = loop(s, s_o, rbs, smap, c.VAL);
          _param = param.tl;
          _smap = match[3];
          _rbs = match[2];
          _s_o = match[1];
          _s = match[0];
          continue ;
        }
        
      }
      _param = param.tl;
      _rbs = {
        hd: c,
        tl: rbs
      };
      continue ;
    };
  };
  var match;
  if (bs) {
    var match$1 = bs.hd;
    if (typeof match$1 === "string") {
      match = [
        "",
        bs
      ];
    } else {
      var variant = match$1.NAME;
      if (variant === "Blocks") {
        var match$2 = match$1.VAL;
        if (match$2) {
          var match$3 = match$2.hd;
          match = typeof match$3 === "string" || match$3.NAME !== "S" ? [
              "",
              bs
            ] : [
              match$3.VAL,
              {
                hd: {
                  NAME: "Blocks",
                  VAL: match$2.tl
                },
                tl: bs.tl
              }
            ];
        } else {
          match = [
            "",
            bs
          ];
        }
      } else {
        match = variant === "S" ? [
            match$1.VAL,
            bs.tl
          ] : [
            "",
            bs
          ];
      }
    }
  } else {
    match = [
      "",
      bs
    ];
  }
  var first = match[0];
  var first_o = section_to_order(1, first);
  var match$4 = loop(first, first_o, /* [] */0, /* [] */0, match[1]);
  return {
          hd: [
            match$4[0],
            [
              match$4[1],
              match$4[2]
            ]
          ],
          tl: match$4[3]
        };
}

function smap_to_blocks(smap) {
  if (!smap) {
    return /* [] */0;
  }
  var match = smap.hd;
  var _acc = /* [] */0;
  var _smap = smap.tl;
  var _s = match[0];
  var _param = match[1][1];
  while(true) {
    var param = _param;
    var s = _s;
    var smap$1 = _smap;
    var acc = _acc;
    if (param) {
      _param = param.tl;
      _acc = {
        hd: param.hd,
        tl: acc
      };
      continue ;
    }
    var acc$1 = s === "" ? acc : ({
          hd: {
            NAME: "S",
            VAL: s
          },
          tl: acc
        });
    if (!smap$1) {
      return acc$1;
    }
    var match$1 = smap$1.hd;
    _param = match$1[1][1];
    _s = match$1[0];
    _smap = smap$1.tl;
    _acc = acc$1;
    continue ;
  };
}

function smap_has_section(smap, sec) {
  return List.exists((function (param) {
                return Caml_obj.caml_equal(sec, param[0]);
              }), smap);
}

function smap_append_block(smap, sec, b) {
  var o = section_to_order(3, sec);
  var loop = function (_max_lt_o, _left, _param) {
    while(true) {
      var param = _param;
      var left = _left;
      var max_lt_o = _max_lt_o;
      if (!param) {
        if (max_lt_o !== -1) {
          return {
                  TAG: /* Error */1,
                  _0: max_lt_o
                };
        } else {
          return {
                  TAG: /* Ok */0,
                  _0: List.rev({
                        hd: [
                          sec,
                          [
                            o,
                            {
                              hd: b,
                              tl: /* [] */0
                            }
                          ]
                        ],
                        tl: left
                      })
                };
        }
      }
      var right = param.tl;
      var s = param.hd;
      var match = s[1];
      var o$1 = match[0];
      if (s[0] === sec) {
        return {
                TAG: /* Ok */0,
                _0: List.rev_append({
                      hd: [
                        sec,
                        [
                          o$1,
                          {
                            hd: b,
                            tl: match[1]
                          }
                        ]
                      ],
                      tl: left
                    }, right)
              };
      }
      var max_lt_o$1 = o$1 < o && o$1 > max_lt_o ? o$1 : max_lt_o;
      _param = right;
      _left = {
        hd: s,
        tl: left
      };
      _max_lt_o = max_lt_o$1;
      continue ;
    };
  };
  var try_insert = loop(-1, /* [] */0, smap);
  if (!try_insert.TAG) {
    return try_insert._0;
  }
  var insert_before = try_insert._0;
  var _left = /* [] */0;
  var _right = smap;
  while(true) {
    var right = _right;
    var left = _left;
    if (right) {
      var s = right.hd;
      if (s[1][0] === insert_before) {
        return List.rev_append({
                    hd: [
                      sec,
                      [
                        o,
                        {
                          hd: b,
                          tl: /* [] */0
                        }
                      ]
                    ],
                    tl: left
                  }, right);
      }
      _right = right.tl;
      _left = {
        hd: s,
        tl: left
      };
      continue ;
    }
    throw {
          RE_EXN_ID: "Assert_failure",
          _1: [
            "cmdliner_manpage.ml",
            129,
            14
          ],
          Error: new Error()
        };
  };
}

function pp_indent(ppf, c) {
  for(var i = 1; i <= c; ++i){
    Format.pp_print_char(ppf, /* " " */32);
  }
  
}

function err(e, fmt) {
  return Format.fprintf(e, Pervasives.$caret$caret(/* Format */{
                  _0: {
                    TAG: /* String_literal */11,
                    _0: "cmdliner error: ",
                    _1: /* End_of_format */0
                  },
                  _1: "cmdliner error: "
                }, Pervasives.$caret$caret(fmt, /* Format */{
                      _0: {
                        TAG: /* Formatting_lit */17,
                        _0: /* Flush_newline */4,
                        _1: /* End_of_format */0
                      },
                      _1: "@."
                    })));
}

function err_unescaped(errs, c, s) {
  return Curry._2(err(errs, /* Format */{
                  _0: {
                    TAG: /* String_literal */11,
                    _0: "unescaped ",
                    _1: {
                      TAG: /* Caml_char */1,
                      _0: {
                        TAG: /* String_literal */11,
                        _0: " in ",
                        _1: {
                          TAG: /* Caml_string */3,
                          _0: /* No_padding */0,
                          _1: /* End_of_format */0
                        }
                      }
                    }
                  },
                  _1: "unescaped %C in %S"
                }), c, s);
}

function err_malformed(errs, s) {
  return Curry._1(err(errs, /* Format */{
                  _0: {
                    TAG: /* String_literal */11,
                    _0: "Malformed $(...) in ",
                    _1: {
                      TAG: /* Caml_string */3,
                      _0: /* No_padding */0,
                      _1: /* End_of_format */0
                    }
                  },
                  _1: "Malformed $(...) in %S"
                }), s);
}

function err_unclosed(errs, s) {
  return Curry._1(err(errs, /* Format */{
                  _0: {
                    TAG: /* String_literal */11,
                    _0: "Unclosed $(...) in ",
                    _1: {
                      TAG: /* Caml_string */3,
                      _0: /* No_padding */0,
                      _1: /* End_of_format */0
                    }
                  },
                  _1: "Unclosed $(...) in %S"
                }), s);
}

function err_undef(errs, id, s) {
  return Curry._2(err(errs, /* Format */{
                  _0: {
                    TAG: /* String_literal */11,
                    _0: "Undefined variable $(",
                    _1: {
                      TAG: /* String */2,
                      _0: /* No_padding */0,
                      _1: {
                        TAG: /* String_literal */11,
                        _0: ") in ",
                        _1: {
                          TAG: /* Caml_string */3,
                          _0: /* No_padding */0,
                          _1: /* End_of_format */0
                        }
                      }
                    }
                  },
                  _1: "Undefined variable $(%s) in %S"
                }), id, s);
}

function err_illegal_esc(errs, c, s) {
  return Curry._2(err(errs, /* Format */{
                  _0: {
                    TAG: /* String_literal */11,
                    _0: "Illegal escape char ",
                    _1: {
                      TAG: /* Caml_char */1,
                      _0: {
                        TAG: /* String_literal */11,
                        _0: " in ",
                        _1: {
                          TAG: /* Caml_string */3,
                          _0: /* No_padding */0,
                          _1: /* End_of_format */0
                        }
                      }
                    }
                  },
                  _1: "Illegal escape char %C in %S"
                }), c, s);
}

function err_markup(errs, dir, s) {
  return Curry._2(err(errs, /* Format */{
                  _0: {
                    TAG: /* String_literal */11,
                    _0: "Unknown cmdliner markup $(",
                    _1: {
                      TAG: /* Char */0,
                      _0: {
                        TAG: /* String_literal */11,
                        _0: ",...) in ",
                        _1: {
                          TAG: /* Caml_string */3,
                          _0: /* No_padding */0,
                          _1: /* End_of_format */0
                        }
                      }
                    }
                  },
                  _1: "Unknown cmdliner markup $(%c,...) in %S"
                }), dir, s);
}

function is_markup_dir(param) {
  if (param !== 98) {
    return param === 105;
  } else {
    return true;
  }
}

function is_markup_esc(param) {
  var switcher = param - 36 | 0;
  if (switcher > 5 || switcher < 0) {
    return switcher === 56;
  } else {
    return switcher > 3 || switcher < 1;
  }
}

function markup_need_esc(param) {
  if (param !== 36) {
    return param === 92;
  } else {
    return true;
  }
}

function markup_text_need_esc(param) {
  var switcher = param - 36 | 0;
  if (switcher > 5 || switcher < 0) {
    return switcher === 56;
  } else {
    return switcher > 4 || switcher < 1;
  }
}

function $$escape(s) {
  var max_i = s.length - 1 | 0;
  var escaped_len = function (_i, _l) {
    while(true) {
      var l = _l;
      var i = _i;
      if (i > max_i) {
        return l;
      }
      if (markup_text_need_esc(Caml_string.get(s, i))) {
        _l = l + 2 | 0;
        _i = i + 1 | 0;
        continue ;
      }
      _l = l + 1 | 0;
      _i = i + 1 | 0;
      continue ;
    };
  };
  var escaped_len$1 = escaped_len(0, 0);
  if (escaped_len$1 === s.length) {
    return s;
  }
  var b = Caml_bytes.caml_create_bytes(escaped_len$1);
  var _i = 0;
  var _k = 0;
  while(true) {
    var k = _k;
    var i = _i;
    if (i > max_i) {
      return Bytes.unsafe_to_string(b);
    }
    var c = s.charCodeAt(i);
    if (markup_text_need_esc(c)) {
      b[k] = /* "\\" */92;
      b[k + 1 | 0] = c;
      _k = k + 2 | 0;
      _i = i + 1 | 0;
      continue ;
    }
    b[k] = c;
    _k = k + 1 | 0;
    _i = i + 1 | 0;
    continue ;
  };
}

function subst_vars(errs, subst, b, s) {
  var max_i = s.length - 1 | 0;
  var flush = function (start, stop) {
    if (start > max_i) {
      return ;
    } else {
      return $$Buffer.add_substring(b, s, start, (stop - start | 0) + 1 | 0);
    }
  };
  var skip_escape = function (k, start, i) {
    if (i > max_i) {
      return err_unescaped(errs, /* "\\" */92, s);
    } else {
      return Curry._2(k, start, i + 1 | 0);
    }
  };
  var skip_markup = function (k, start, _i) {
    while(true) {
      var i = _i;
      if (i > max_i) {
        err_unclosed(errs, s);
        return Curry._2(k, start, i);
      }
      var c = Caml_string.get(s, i);
      if (c === 41) {
        return Curry._2(k, start, i + 1 | 0);
      }
      if (c === 92) {
        return skip_escape((function (param, param$1) {
                      return skip_markup(k, param, param$1);
                    }), start, i + 1 | 0);
      }
      _i = i + 1 | 0;
      continue ;
    };
  };
  var loop = function (start, _i) {
    while(true) {
      var i = _i;
      if (i > max_i) {
        return flush(start, max_i);
      }
      var next = i + 1 | 0;
      var c = Caml_string.get(s, i);
      if (c !== 36) {
        if (c === 92) {
          return skip_escape(loop, start, next);
        }
        _i = next;
        continue ;
      }
      if (next > max_i) {
        return err_unescaped(errs, /* "$" */36, s);
      }
      var match = Caml_string.get(s, next);
      if (match !== 40) {
        err_unescaped(errs, /* "$" */36, s);
        _i = next;
        continue ;
      }
      var min = next + 2 | 0;
      if (min > max_i) {
        err_unclosed(errs, s);
        _i = next;
        continue ;
      }
      var match$1 = Caml_string.get(s, min);
      if (match$1 === 44) {
        return skip_markup(loop, start, min + 1 | 0);
      }
      var start_id = next + 1 | 0;
      flush(start, i - 1 | 0);
      var _i$1 = start_id;
      while(true) {
        var i$1 = _i$1;
        if (i$1 > max_i) {
          err_unclosed(errs, s);
          return loop(start_id, i$1);
        }
        if (Caml_string.get(s, i$1) !== /* ")" */41) {
          _i$1 = i$1 + 1 | 0;
          continue ;
        }
        var id = $$String.sub(s, start_id, i$1 - start_id | 0);
        var next$1 = i$1 + 1 | 0;
        var v = Curry._1(subst, id);
        if (v !== undefined) {
          $$Buffer.add_string(b, v);
        } else {
          err_undef(errs, id, s);
          $$Buffer.add_string(b, "undefined");
        }
        return loop(next$1, next$1);
      };
    };
  };
  $$Buffer.clear(b);
  loop(0, 0);
  return $$Buffer.contents(b);
}

function add_markup_esc(errs, k, b, s, start, next, target_need_escape, target_escape) {
  var max_i = s.length - 1 | 0;
  if (next > max_i) {
    return err_unescaped(errs, /* "\\" */92, s);
  }
  var c = Caml_string.get(s, next);
  if (is_markup_esc(Caml_string.get(s, next))) {
    if (Curry._1(target_need_escape, c)) {
      Curry._2(target_escape, b, c);
    } else {
      $$Buffer.add_char(b, c);
    }
    return Curry._2(k, next + 1 | 0, next + 1 | 0);
  } else {
    err_illegal_esc(errs, c, s);
    return Curry._2(k, next + 1 | 0, next + 1 | 0);
  }
}

function add_markup_text(errs, k, b, s, start, target_need_escape, target_escape) {
  var max_i = s.length - 1 | 0;
  var flush = function (start, stop) {
    if (start > max_i) {
      return ;
    } else {
      return $$Buffer.add_substring(b, s, start, (stop - start | 0) + 1 | 0);
    }
  };
  var loop = function (_start, _i) {
    while(true) {
      var i = _i;
      var start = _start;
      if (i > max_i) {
        err_unclosed(errs, s);
        return flush(start, max_i);
      }
      var next = i + 1 | 0;
      var c = Caml_string.get(s, i);
      if (c !== 41) {
        if (c !== 92) {
          if (markup_text_need_esc(c)) {
            err_unescaped(errs, c, s);
            flush(start, i - 1 | 0);
            _i = next;
            _start = next;
            continue ;
          }
          if (Curry._1(target_need_escape, c)) {
            flush(start, i - 1 | 0);
            Curry._2(target_escape, b, c);
            _i = next;
            _start = next;
            continue ;
          }
          _i = next;
          continue ;
        }
        flush(start, i - 1 | 0);
        return add_markup_esc(errs, loop, b, s, start, next, target_need_escape, target_escape);
      }
      flush(start, i - 1 | 0);
      return Curry._2(k, next, next);
    };
  };
  return loop(start, start);
}

function doc_to_plain(errs, subst, b, s) {
  var s$1 = subst_vars(errs, subst, b, s);
  var max_i = s$1.length - 1 | 0;
  var flush = function (start, stop) {
    if (start > max_i) {
      return ;
    } else {
      return $$Buffer.add_substring(b, s$1, start, (stop - start | 0) + 1 | 0);
    }
  };
  var need_escape = function (param) {
    return false;
  };
  var $$escape = function (param, param$1) {
    throw {
          RE_EXN_ID: "Assert_failure",
          _1: [
            "cmdliner_manpage.ml",
            271,
            19
          ],
          Error: new Error()
        };
  };
  var loop = function (_start, _i) {
    while(true) {
      var i = _i;
      var start = _start;
      if (i > max_i) {
        return flush(start, max_i);
      }
      var next = i + 1 | 0;
      var c = Caml_string.get(s$1, i);
      if (c !== 36) {
        if (c !== 92) {
          if (markup_need_esc(c)) {
            err_unescaped(errs, c, s$1);
            flush(start, i - 1 | 0);
            _i = next;
            _start = next;
            continue ;
          }
          _i = next;
          continue ;
        }
        flush(start, i - 1 | 0);
        return add_markup_esc(errs, loop, b, s$1, start, next, need_escape, $$escape);
      }
      if (next > max_i) {
        return err_unescaped(errs, /* "$" */36, s$1);
      }
      var match = Caml_string.get(s$1, next);
      if (match !== 40) {
        err_unescaped(errs, /* "$" */36, s$1);
        _i = next;
        continue ;
      }
      var min = next + 2 | 0;
      if (min > max_i) {
        err_unclosed(errs, s$1);
        _i = next;
        continue ;
      }
      var match$1 = Caml_string.get(s$1, min);
      if (match$1 !== 44) {
        err_malformed(errs, s$1);
        _i = next;
        continue ;
      }
      var markup = Caml_string.get(s$1, min - 1 | 0);
      if (is_markup_dir(markup)) {
        var start_data = min + 1 | 0;
        flush(start, i - 1 | 0);
        return add_markup_text(errs, loop, b, s$1, start_data, need_escape, $$escape);
      }
      err_markup(errs, markup, s$1);
      _i = next;
      continue ;
    };
  };
  $$Buffer.clear(b);
  loop(0, 0);
  return $$Buffer.contents(b);
}

function pp_to_temp_file(pp_v, v) {
  try {
    var exec = Curry._1(Filename.basename, Caml_array.caml_array_get(Sys.argv, 0));
    var match = Filename.open_temp_file(undefined, undefined, undefined, exec, "out");
    var oc = match[1];
    var file = match[0];
    var ppf = Format.formatter_of_out_channel(oc);
    Curry._2(pp_v, ppf, v);
    Format.pp_print_flush(ppf, undefined);
    Pervasives.close_out(oc);
    Pervasives.at_exit(function (param) {
          try {
            return Caml_external_polyfill.resolve("caml_sys_remove")(file);
          }
          catch (raw_e){
            var e = Caml_js_exceptions.internalToOCamlException(raw_e);
            if (e.RE_EXN_ID === "Sys_error") {
              return ;
            }
            throw e;
          }
        });
    return file;
  }
  catch (raw_exn){
    var exn = Caml_js_exceptions.internalToOCamlException(raw_exn);
    if (exn.RE_EXN_ID === "Sys_error") {
      return ;
    }
    throw exn;
  }
}

function find_cmd(cmds) {
  var match = Sys.os_type === "Win32" ? [
      "where",
      " NUL"
    ] : [
      "type",
      "/dev/null"
    ];
  var $$null = match[1];
  var test = match[0];
  var cmd = function (c) {
    return Caml_sys.caml_sys_system_command(Curry._4(Printf.sprintf(/* Format */{
                        _0: {
                          TAG: /* String */2,
                          _0: /* No_padding */0,
                          _1: {
                            TAG: /* Char_literal */12,
                            _0: /* " " */32,
                            _1: {
                              TAG: /* String */2,
                              _0: /* No_padding */0,
                              _1: {
                                TAG: /* String_literal */11,
                                _0: " 1>",
                                _1: {
                                  TAG: /* String */2,
                                  _0: /* No_padding */0,
                                  _1: {
                                    TAG: /* String_literal */11,
                                    _0: " 2>",
                                    _1: {
                                      TAG: /* String */2,
                                      _0: /* No_padding */0,
                                      _1: /* End_of_format */0
                                    }
                                  }
                                }
                              }
                            }
                          }
                        },
                        _1: "%s %s 1>%s 2>%s"
                      }), test, c, $$null, $$null)) === 0;
  };
  try {
    return List.find(cmd, cmds);
  }
  catch (raw_exn){
    var exn = Caml_js_exceptions.internalToOCamlException(raw_exn);
    if (exn.RE_EXN_ID === "Not_found") {
      return ;
    }
    throw exn;
  }
}

function print(_errsOpt, _substOpt, _fmt, ppf, page) {
  while(true) {
    var errsOpt = _errsOpt;
    var substOpt = _substOpt;
    var fmt = _fmt;
    var errs = errsOpt !== undefined ? Caml_option.valFromOption(errsOpt) : Format.err_formatter;
    var subst = substOpt !== undefined ? substOpt : (function (x) {
          
        });
    if (fmt === "Plain") {
      return Curry._2(Format.fprintf(ppf, /* Format */{
                      _0: {
                        TAG: /* Formatting_gen */18,
                        _0: {
                          TAG: /* Open_box */1,
                          _0: /* Format */{
                            _0: {
                              TAG: /* String_literal */11,
                              _0: "<v>",
                              _1: /* End_of_format */0
                            },
                            _1: "<v>"
                          }
                        },
                        _1: {
                          TAG: /* Alpha */15,
                          _0: {
                            TAG: /* Formatting_lit */17,
                            _0: /* Close_box */0,
                            _1: /* End_of_format */0
                          }
                        }
                      },
                      _1: "@[<v>%a@]"
                    }), (function(errs,subst){
                return function (param, param$1) {
                  var b = $$Buffer.create(1024);
                  var markup = function (t) {
                    return doc_to_plain(errs, subst, b, t);
                  };
                  var pp_tokens = function (ppf, t) {
                    return Cmdliner_base.pp_tokens(true, ppf, t);
                  };
                  var loop = function (_param) {
                    while(true) {
                      var param$2 = _param;
                      if (!param$2) {
                        return ;
                      }
                      var ts = param$2.tl;
                      var t = param$2.hd;
                      if (typeof t !== "string") {
                        var variant = t.NAME;
                        if (variant === "I") {
                          var match = t.VAL;
                          var label = markup(match[0]);
                          var s = markup(match[1]);
                          Curry._4(Format.fprintf(param, /* Format */{
                                    _0: {
                                      TAG: /* Formatting_gen */18,
                                      _0: {
                                        TAG: /* Open_box */1,
                                        _0: /* Format */{
                                          _0: /* End_of_format */0,
                                          _1: ""
                                        }
                                      },
                                      _1: {
                                        TAG: /* Alpha */15,
                                        _0: {
                                          TAG: /* Formatting_gen */18,
                                          _0: {
                                            TAG: /* Open_box */1,
                                            _0: /* Format */{
                                              _0: /* End_of_format */0,
                                              _1: ""
                                            }
                                          },
                                          _1: {
                                            TAG: /* Alpha */15,
                                            _0: {
                                              TAG: /* Formatting_lit */17,
                                              _0: /* Close_box */0,
                                              _1: /* End_of_format */0
                                            }
                                          }
                                        }
                                      }
                                    },
                                    _1: "@[%a@[%a@]"
                                  }), pp_indent, 7, pp_tokens, label);
                          if (s === "") {
                            Format.fprintf(param, /* Format */{
                                  _0: {
                                    TAG: /* Formatting_lit */17,
                                    _0: /* Close_box */0,
                                    _1: {
                                      TAG: /* Formatting_lit */17,
                                      _0: {
                                        TAG: /* Break */0,
                                        _0: "@,",
                                        _1: 0,
                                        _2: 0
                                      },
                                      _1: /* End_of_format */0
                                    }
                                  },
                                  _1: "@]@,"
                                });
                          } else {
                            var ll = label.length;
                            if (ll < 4) {
                              Curry._4(Format.fprintf(param, /* Format */{
                                        _0: {
                                          TAG: /* Alpha */15,
                                          _0: {
                                            TAG: /* Formatting_gen */18,
                                            _0: {
                                              TAG: /* Open_box */1,
                                              _0: /* Format */{
                                                _0: /* End_of_format */0,
                                                _1: ""
                                              }
                                            },
                                            _1: {
                                              TAG: /* Alpha */15,
                                              _0: {
                                                TAG: /* Formatting_lit */17,
                                                _0: /* Close_box */0,
                                                _1: {
                                                  TAG: /* Formatting_lit */17,
                                                  _0: /* Close_box */0,
                                                  _1: /* End_of_format */0
                                                }
                                              }
                                            }
                                          }
                                        },
                                        _1: "%a@[%a@]@]"
                                      }), pp_indent, 4 - ll | 0, pp_tokens, s);
                            } else {
                              Curry._4(Format.fprintf(param, /* Format */{
                                        _0: {
                                          TAG: /* Formatting_lit */17,
                                          _0: /* Force_newline */3,
                                          _1: {
                                            TAG: /* Alpha */15,
                                            _0: {
                                              TAG: /* Formatting_gen */18,
                                              _0: {
                                                TAG: /* Open_box */1,
                                                _0: /* Format */{
                                                  _0: /* End_of_format */0,
                                                  _1: ""
                                                }
                                              },
                                              _1: {
                                                TAG: /* Alpha */15,
                                                _0: {
                                                  TAG: /* Formatting_lit */17,
                                                  _0: /* Close_box */0,
                                                  _1: {
                                                    TAG: /* Formatting_lit */17,
                                                    _0: /* Close_box */0,
                                                    _1: /* End_of_format */0
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        },
                                        _1: "@\n%a@[%a@]@]"
                                      }), pp_indent, 11, pp_tokens, s);
                            }
                            if (ts) {
                              var match$1 = ts.hd;
                              if (typeof match$1 === "string" || match$1.NAME !== "I") {
                                
                              } else {
                                Format.fprintf(param, /* Format */{
                                      _0: {
                                        TAG: /* Formatting_lit */17,
                                        _0: {
                                          TAG: /* Break */0,
                                          _0: "@,",
                                          _1: 0,
                                          _2: 0
                                        },
                                        _1: /* End_of_format */0
                                      },
                                      _1: "@,"
                                    });
                              }
                            }
                            
                          }
                        } else if (variant === "P") {
                          Curry._4(Format.fprintf(param, /* Format */{
                                    _0: {
                                      TAG: /* Alpha */15,
                                      _0: {
                                        TAG: /* Formatting_gen */18,
                                        _0: {
                                          TAG: /* Open_box */1,
                                          _0: /* Format */{
                                            _0: /* End_of_format */0,
                                            _1: ""
                                          }
                                        },
                                        _1: {
                                          TAG: /* Alpha */15,
                                          _0: {
                                            TAG: /* Formatting_lit */17,
                                            _0: /* Close_box */0,
                                            _1: {
                                              TAG: /* Formatting_lit */17,
                                              _0: {
                                                TAG: /* Break */0,
                                                _0: "@,",
                                                _1: 0,
                                                _2: 0
                                              },
                                              _1: /* End_of_format */0
                                            }
                                          }
                                        }
                                      }
                                    },
                                    _1: "%a@[%a@]@,"
                                  }), pp_indent, 7, pp_tokens, markup(t.VAL));
                        } else if (variant === "S") {
                          Curry._2(Format.fprintf(param, /* Format */{
                                    _0: {
                                      TAG: /* Formatting_gen */18,
                                      _0: {
                                        TAG: /* Open_box */1,
                                        _0: /* Format */{
                                          _0: /* End_of_format */0,
                                          _1: ""
                                        }
                                      },
                                      _1: {
                                        TAG: /* Alpha */15,
                                        _0: {
                                          TAG: /* Formatting_lit */17,
                                          _0: /* Close_box */0,
                                          _1: /* End_of_format */0
                                        }
                                      }
                                    },
                                    _1: "@[%a@]"
                                  }), pp_tokens, markup(t.VAL));
                        } else if (variant === "Pre") {
                          Curry._4(Format.fprintf(param, /* Format */{
                                    _0: {
                                      TAG: /* Alpha */15,
                                      _0: {
                                        TAG: /* Formatting_gen */18,
                                        _0: {
                                          TAG: /* Open_box */1,
                                          _0: /* Format */{
                                            _0: /* End_of_format */0,
                                            _1: ""
                                          }
                                        },
                                        _1: {
                                          TAG: /* Alpha */15,
                                          _0: {
                                            TAG: /* Formatting_lit */17,
                                            _0: /* Close_box */0,
                                            _1: {
                                              TAG: /* Formatting_lit */17,
                                              _0: {
                                                TAG: /* Break */0,
                                                _0: "@,",
                                                _1: 0,
                                                _2: 0
                                              },
                                              _1: /* End_of_format */0
                                            }
                                          }
                                        }
                                      }
                                    },
                                    _1: "%a@[%a@]@,"
                                  }), pp_indent, 7, Cmdliner_base.pp_lines, markup(t.VAL));
                        } else {
                          loop(t.VAL);
                        }
                      }
                      if (ts) {
                        if (ts.hd === "Noblank") {
                          _param = ts.tl;
                          continue ;
                        }
                        Format.pp_print_cut(param, undefined);
                        _param = ts;
                        continue ;
                      }
                      Format.pp_print_cut(param, undefined);
                      _param = ts;
                      continue ;
                    };
                  };
                  return loop(param$1);
                }
                }(errs,subst)), page[1]);
    }
    if (fmt === "Auto") {
      var match;
      try {
        match = Caml_sys.caml_sys_getenv("TERM");
      }
      catch (raw_exn){
        var exn = Caml_js_exceptions.internalToOCamlException(raw_exn);
        if (exn.RE_EXN_ID === "Not_found") {
          match = undefined;
        } else {
          throw exn;
        }
      }
      if (match !== undefined && match !== "dumb") {
        _fmt = "Pager";
        _substOpt = subst;
        _errsOpt = Caml_option.some(errs);
        continue ;
      }
      _fmt = "Plain";
      _substOpt = subst;
      _errsOpt = Caml_option.some(errs);
      continue ;
    }
    if (fmt === "Groff") {
      var match$1 = page[0];
      return Curry._7(Format.fprintf(ppf, /* Format */{
                      _0: {
                        TAG: /* String_literal */11,
                        _0: ".\\\" Pipe this output to groff -Tutf8 | less",
                        _1: {
                          TAG: /* Formatting_lit */17,
                          _0: /* Force_newline */3,
                          _1: {
                            TAG: /* String_literal */11,
                            _0: ".\\\"",
                            _1: {
                              TAG: /* Formatting_lit */17,
                              _0: /* Force_newline */3,
                              _1: {
                                TAG: /* String_literal */11,
                                _0: ".mso an.tmac",
                                _1: {
                                  TAG: /* Formatting_lit */17,
                                  _0: /* Force_newline */3,
                                  _1: {
                                    TAG: /* String_literal */11,
                                    _0: ".TH \"",
                                    _1: {
                                      TAG: /* String */2,
                                      _0: /* No_padding */0,
                                      _1: {
                                        TAG: /* String_literal */11,
                                        _0: "\" ",
                                        _1: {
                                          TAG: /* Int */4,
                                          _0: /* Int_d */0,
                                          _1: /* No_padding */0,
                                          _2: /* No_precision */0,
                                          _3: {
                                            TAG: /* String_literal */11,
                                            _0: " \"",
                                            _1: {
                                              TAG: /* String */2,
                                              _0: /* No_padding */0,
                                              _1: {
                                                TAG: /* String_literal */11,
                                                _0: "\" \"",
                                                _1: {
                                                  TAG: /* String */2,
                                                  _0: /* No_padding */0,
                                                  _1: {
                                                    TAG: /* String_literal */11,
                                                    _0: "\" \"",
                                                    _1: {
                                                      TAG: /* String */2,
                                                      _0: /* No_padding */0,
                                                      _1: {
                                                        TAG: /* Char_literal */12,
                                                        _0: /* "\"" */34,
                                                        _1: {
                                                          TAG: /* Formatting_lit */17,
                                                          _0: /* Force_newline */3,
                                                          _1: {
                                                            TAG: /* String_literal */11,
                                                            _0: ".\\\" Disable hyphenation and ragged-right",
                                                            _1: {
                                                              TAG: /* Formatting_lit */17,
                                                              _0: /* Force_newline */3,
                                                              _1: {
                                                                TAG: /* String_literal */11,
                                                                _0: ".nh",
                                                                _1: {
                                                                  TAG: /* Formatting_lit */17,
                                                                  _0: /* Force_newline */3,
                                                                  _1: {
                                                                    TAG: /* String_literal */11,
                                                                    _0: ".ad l",
                                                                    _1: {
                                                                      TAG: /* Alpha */15,
                                                                      _0: {
                                                                        TAG: /* Formatting_lit */17,
                                                                        _0: /* FFlush */2,
                                                                        _1: /* End_of_format */0
                                                                      }
                                                                    }
                                                                  }
                                                                }
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      },
                      _1: ".\\\" Pipe this output to groff -Tutf8 | less@\n.\\\"@\n.mso an.tmac@\n.TH \"%s\" %d \"%s\" \"%s\" \"%s\"@\n.\\\" Disable hyphenation and ragged-right@\n.nh@\n.ad l%a@?"
                    }), match$1[0], match$1[1], match$1[2], match$1[3], match$1[4], (function(errs,subst){
                return function (param, param$1) {
                  var buf = $$Buffer.create(1024);
                  var markup = function (t) {
                    var s = subst_vars(errs, subst, buf, t);
                    var max_i = s.length - 1 | 0;
                    var flush = function (start, stop) {
                      if (start > max_i) {
                        return ;
                      } else {
                        return $$Buffer.add_substring(buf, s, start, (stop - start | 0) + 1 | 0);
                      }
                    };
                    var need_escape = function (param) {
                      var switcher = param - 39 | 0;
                      if (switcher > 7 || switcher < 0) {
                        return switcher === 53;
                      } else {
                        return switcher > 5 || switcher < 1;
                      }
                    };
                    var $$escape = function (b, c) {
                      return Curry._1(Printf.bprintf(b, /* Format */{
                                      _0: {
                                        TAG: /* String_literal */11,
                                        _0: "\\N'",
                                        _1: {
                                          TAG: /* Int */4,
                                          _0: /* Int_d */0,
                                          _1: /* No_padding */0,
                                          _2: /* No_precision */0,
                                          _3: {
                                            TAG: /* Char_literal */12,
                                            _0: /* "'" */39,
                                            _1: /* End_of_format */0
                                          }
                                        }
                                      },
                                      _1: "\\N'%d'"
                                    }), c);
                    };
                    var end_text = function (start, i) {
                      $$Buffer.add_string(buf, "\\fR");
                      return loop(start, i);
                    };
                    var loop = function (_start, _i) {
                      while(true) {
                        var i = _i;
                        var start = _start;
                        if (i > max_i) {
                          return flush(start, max_i);
                        }
                        var next = i + 1 | 0;
                        var c = Caml_string.get(s, i);
                        if (c !== 36) {
                          if (c !== 92) {
                            if (markup_need_esc(c)) {
                              err_unescaped(errs, c, s);
                              flush(start, i - 1 | 0);
                              _i = next;
                              _start = next;
                              continue ;
                            }
                            if (need_escape(c)) {
                              flush(start, i - 1 | 0);
                              $$escape(buf, c);
                              _i = next;
                              _start = next;
                              continue ;
                            }
                            _i = next;
                            continue ;
                          }
                          flush(start, i - 1 | 0);
                          return add_markup_esc(errs, loop, buf, s, start, next, need_escape, $$escape);
                        }
                        if (next > max_i) {
                          return err_unescaped(errs, /* "$" */36, s);
                        }
                        var match = Caml_string.get(s, next);
                        if (match !== 40) {
                          err_unescaped(errs, /* "$" */36, s);
                          flush(start, i - 1 | 0);
                          _i = next;
                          _start = next;
                          continue ;
                        }
                        var min = next + 2 | 0;
                        if (min > max_i) {
                          err_unclosed(errs, s);
                          _i = next;
                          continue ;
                        }
                        var match$1 = Caml_string.get(s, min);
                        if (match$1 !== 44) {
                          err_malformed(errs, s);
                          _i = next;
                          continue ;
                        }
                        var start_data = min + 1 | 0;
                        flush(start, i - 1 | 0);
                        var markup = Caml_string.get(s, min - 1 | 0);
                        if (markup !== 98) {
                          if (markup !== 105) {
                            err_markup(errs, markup, s);
                          } else {
                            $$Buffer.add_string(buf, "\\fI");
                          }
                        } else {
                          $$Buffer.add_string(buf, "\\fB");
                        }
                        return add_markup_text(errs, end_text, buf, s, start_data, need_escape, $$escape);
                      };
                    };
                    $$Buffer.clear(buf);
                    loop(0, 0);
                    return $$Buffer.contents(buf);
                  };
                  var pp_tokens = function (ppf, t) {
                    return Cmdliner_base.pp_tokens(false, ppf, t);
                  };
                  var pp_block = function (param$2) {
                    if (typeof param$2 === "string") {
                      return Format.fprintf(param, /* Format */{
                                  _0: {
                                    TAG: /* Formatting_lit */17,
                                    _0: /* Force_newline */3,
                                    _1: {
                                      TAG: /* String_literal */11,
                                      _0: ".sp -1",
                                      _1: /* End_of_format */0
                                    }
                                  },
                                  _1: "@\n.sp -1"
                                });
                    }
                    var variant = param$2.NAME;
                    if (variant !== "I") {
                      if (variant === "P") {
                        return Curry._2(Format.fprintf(param, /* Format */{
                                        _0: {
                                          TAG: /* Formatting_lit */17,
                                          _0: /* Force_newline */3,
                                          _1: {
                                            TAG: /* String_literal */11,
                                            _0: ".P",
                                            _1: {
                                              TAG: /* Formatting_lit */17,
                                              _0: /* Force_newline */3,
                                              _1: {
                                                TAG: /* Alpha */15,
                                                _0: /* End_of_format */0
                                              }
                                            }
                                          }
                                        },
                                        _1: "@\n.P@\n%a"
                                      }), pp_tokens, markup(param$2.VAL));
                      } else if (variant === "S") {
                        return Curry._2(Format.fprintf(param, /* Format */{
                                        _0: {
                                          TAG: /* Formatting_lit */17,
                                          _0: /* Force_newline */3,
                                          _1: {
                                            TAG: /* String_literal */11,
                                            _0: ".SH ",
                                            _1: {
                                              TAG: /* Alpha */15,
                                              _0: /* End_of_format */0
                                            }
                                          }
                                        },
                                        _1: "@\n.SH %a"
                                      }), pp_tokens, markup(param$2.VAL));
                      } else if (variant === "Pre") {
                        return Curry._2(Format.fprintf(param, /* Format */{
                                        _0: {
                                          TAG: /* Formatting_lit */17,
                                          _0: /* Force_newline */3,
                                          _1: {
                                            TAG: /* String_literal */11,
                                            _0: ".P",
                                            _1: {
                                              TAG: /* Formatting_lit */17,
                                              _0: /* Force_newline */3,
                                              _1: {
                                                TAG: /* String_literal */11,
                                                _0: ".nf",
                                                _1: {
                                                  TAG: /* Formatting_lit */17,
                                                  _0: /* Force_newline */3,
                                                  _1: {
                                                    TAG: /* Alpha */15,
                                                    _0: {
                                                      TAG: /* Formatting_lit */17,
                                                      _0: /* Force_newline */3,
                                                      _1: {
                                                        TAG: /* String_literal */11,
                                                        _0: ".fi",
                                                        _1: /* End_of_format */0
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        },
                                        _1: "@\n.P@\n.nf@\n%a@\n.fi"
                                      }), Cmdliner_base.pp_lines, markup(param$2.VAL));
                      } else {
                        return List.iter(pp_block, param$2.VAL);
                      }
                    }
                    var match = param$2.VAL;
                    return Curry._4(Format.fprintf(param, /* Format */{
                                    _0: {
                                      TAG: /* Formatting_lit */17,
                                      _0: /* Force_newline */3,
                                      _1: {
                                        TAG: /* String_literal */11,
                                        _0: ".TP 4",
                                        _1: {
                                          TAG: /* Formatting_lit */17,
                                          _0: /* Force_newline */3,
                                          _1: {
                                            TAG: /* Alpha */15,
                                            _0: {
                                              TAG: /* Formatting_lit */17,
                                              _0: /* Force_newline */3,
                                              _1: {
                                                TAG: /* Alpha */15,
                                                _0: /* End_of_format */0
                                              }
                                            }
                                          }
                                        }
                                      }
                                    },
                                    _1: "@\n.TP 4@\n%a@\n%a"
                                  }), pp_tokens, markup(match[0]), pp_tokens, markup(match[1]));
                  };
                  return List.iter(pp_block, param$1);
                }
                }(errs,subst)), page[1]);
    }
    var partial_arg = subst;
    var partial_arg$1 = Caml_option.some(errs);
    var print$1 = (function(partial_arg,partial_arg$1){
    return function print$1(param, param$1, param$2) {
      return print(partial_arg$1, partial_arg, param, param$1, param$2);
    }
    }(partial_arg,partial_arg$1));
    var cmds = {
      hd: "less",
      tl: {
        hd: "more",
        tl: /* [] */0
      }
    };
    var cmds$1;
    try {
      cmds$1 = {
        hd: Caml_sys.caml_sys_getenv("PAGER"),
        tl: cmds
      };
    }
    catch (raw_exn$1){
      var exn$1 = Caml_js_exceptions.internalToOCamlException(raw_exn$1);
      if (exn$1.RE_EXN_ID === "Not_found") {
        cmds$1 = cmds;
      } else {
        throw exn$1;
      }
    }
    var cmds$2;
    try {
      cmds$2 = {
        hd: Caml_sys.caml_sys_getenv("MANPAGER"),
        tl: cmds$1
      };
    }
    catch (raw_exn$2){
      var exn$2 = Caml_js_exceptions.internalToOCamlException(raw_exn$2);
      if (exn$2.RE_EXN_ID === "Not_found") {
        cmds$2 = cmds$1;
      } else {
        throw exn$2;
      }
    }
    var pager = find_cmd(cmds$2);
    if (pager === undefined) {
      return Curry._3(print$1, "Plain", ppf, page);
    }
    var c = find_cmd({
          hd: "groff",
          tl: {
            hd: "nroff",
            tl: /* [] */0
          }
        });
    var cmd;
    if (c !== undefined) {
      var f = pp_to_temp_file(Curry._1(print$1, "Groff"), page);
      if (f !== undefined) {
        var xroff = c === "groff" ? c + " -Tascii -P-c" : c;
        cmd = Curry._3(Printf.sprintf(/* Format */{
                  _0: {
                    TAG: /* String */2,
                    _0: /* No_padding */0,
                    _1: {
                      TAG: /* String_literal */11,
                      _0: " < ",
                      _1: {
                        TAG: /* String */2,
                        _0: /* No_padding */0,
                        _1: {
                          TAG: /* String_literal */11,
                          _0: " | ",
                          _1: {
                            TAG: /* String */2,
                            _0: /* No_padding */0,
                            _1: /* End_of_format */0
                          }
                        }
                      }
                    }
                  },
                  _1: "%s < %s | %s"
                }), xroff, f, pager);
      } else {
        cmd = undefined;
      }
    } else {
      var f$1 = pp_to_temp_file(Curry._1(print$1, "Plain"), page);
      cmd = f$1 !== undefined ? Curry._2(Printf.sprintf(/* Format */{
                  _0: {
                    TAG: /* String */2,
                    _0: /* No_padding */0,
                    _1: {
                      TAG: /* String_literal */11,
                      _0: " < ",
                      _1: {
                        TAG: /* String */2,
                        _0: /* No_padding */0,
                        _1: /* End_of_format */0
                      }
                    }
                  },
                  _1: "%s < %s"
                }), pager, f$1) : undefined;
    }
    if (cmd !== undefined && Caml_sys.caml_sys_system_command(cmd) === 0) {
      return ;
    } else {
      return Curry._3(print$1, "Plain", ppf, page);
    }
  };
}

var s_exit_status_intro = {
  NAME: "P",
  VAL: "$(tname) exits with the following status:"
};

var s_environment_intro = {
  NAME: "P",
  VAL: "These environment variables affect the execution of $(tname):"
};

exports.$$escape = $$escape;
exports.s_name = s_name;
exports.s_synopsis = s_synopsis;
exports.s_description = s_description;
exports.s_commands = s_commands;
exports.s_arguments = s_arguments;
exports.s_options = s_options;
exports.s_common_options = s_common_options;
exports.s_exit_status = s_exit_status;
exports.s_environment = s_environment;
exports.s_files = s_files;
exports.s_bugs = s_bugs;
exports.s_examples = s_examples;
exports.s_authors = s_authors;
exports.s_see_also = s_see_also;
exports.smap_of_blocks = smap_of_blocks;
exports.smap_to_blocks = smap_to_blocks;
exports.smap_has_section = smap_has_section;
exports.smap_append_block = smap_append_block;
exports.s_exit_status_intro = s_exit_status_intro;
exports.s_environment_intro = s_environment_intro;
exports.print = print;
exports.subst_vars = subst_vars;
exports.doc_to_plain = doc_to_plain;
/* Format Not a pure module */
